@using Society.Models;
@using Society.Services;
@inject IClientesRepository ClientesRepository
@using System.ComponentModel.DataAnnotations
<MudDialog Style="width:50%;">
    <DialogContent>
        <MudForm Model="cliente" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField T="String" Label="Nome" @bind-Value="cliente.Nome" Required="true" RequiredError="Informe o nome!" ></MudTextField>

            <MudTextField T="String" Label="CPF" @bind-Value="cliente.Cpf" Mask="@(new PatternMask("000.000.000-00"))"
                          Required="true" RequiredError="Informe o CPF!" 
            Validation="@(new Func<string, IEnumerable<string>>(TamanhoCpf))"></MudTextField>

            <MudTextField T="String" Label="Telefone" @bind-Value="cliente.Telefone"
                          Required="true" RequiredError="Informe o telefone!" Mask="@(new PatternMask("(00) 00000-0000"))"></MudTextField>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    //[Parameter] public Cliente cliente { get; set; } = new Cliente();
    Cliente cliente = new Cliente();
    bool success;
    string[] errors = { };
    MudForm form;


    private IEnumerable<string> TamanhoCpf(string cpf)
    {
        if(string.IsNullOrWhiteSpace(cpf))
        {
            yield return "Insira o CPF!";
            yield break;
        }
        if (cpf.Count() < 14)
        {
            yield return "CPF muito curto";
        }
    }

    async Task Submit()
    {
        if (cliente != null)
        {
            await ClientesRepository.CriarClienteAsync(cliente);
        }
        MudDialog.Close(DialogResult.Ok(true));
    }
    void Cancel() => MudDialog.Cancel();


}
 