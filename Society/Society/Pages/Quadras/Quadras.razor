@page "/quadras"
@using Society.Models;
@using Society.Repositories;
@inject IQuadrasRepository QuadrasRepository
@inject IDialogService DialogService
@using MudBlazor
@inject Radzen.NotificationService NotificationService

<div style="padding:12px">
    <MudText Typo="Typo.h2">Quadras</MudText>
    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.PersonAddAlt1" Color="Color.Primary" @onclick="OpenDialogCreate">Cadastrar nova quadra</MudButton>
    <MudTable Items="@quadras" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Nome</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nome">@context.Name</MudTd>
            <MudTd>
                <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => OnButtonDeleteClicked(@context.Id))" />
            </MudTd>
            <MudTd>
                <MudFab Style="@($"background:{Colors.Amber.Darken2}; color:{Colors.Shades.White};")" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => OpenDialogEdit(@context.Id,context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</div>

 
<MudMessageBox @ref="mboxExcluir" Title="AVISO!" CancelText="Cancelar">
    <MessageContent>
        Excluir <b><i>NÃO</i></b> pode ser desfeito!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Excluir</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    //MudBlazor variaveis
    private bool _hidePosition;
    private bool _loading;
    private IEnumerable<Quadra> quadras = new List<Quadra>();
    MudMessageBox mboxExcluir { get; set; }

    protected override async Task OnInitializedAsync()
    {
        quadras = await QuadrasRepository.ListarQuadrasAsync();
    }

    async void ShowNotification(Radzen.NotificationMessage notification) => NotificationService.Notify(notification);

    private async Task OpenDialogCreate()
    {
        var options = new DialogOptions {CloseOnEscapeKey = true };
        var dialog = DialogService.Show<CreateQuadraDialog>("Cadastrar Quadra", options);
        var result = await dialog.Result;

        if (result?.Data is bool success && success)
        {
            quadras = await QuadrasRepository.ListarQuadrasAsync();
            var notification = new Radzen.NotificationMessage
                {
                    Severity = Radzen.NotificationSeverity.Success,
                    Summary = "Sucesso!",
                    Detail = "Quadra criada com sucesso!",
                    Duration = 4000
                };

            ShowNotification(notification);
        }
    }

    private async void OnButtonDeleteClicked(int id)
    {
        bool? result = await mboxExcluir.Show();
        StateHasChanged();

        if (result is true)
        {
            await Excluir(id);
            var notification = new Radzen.NotificationMessage
                {
                    Severity = Radzen.NotificationSeverity.Error,
                    Summary = "Excluido",
                    Detail = "Quadra excluída",
                    Duration = 4000
                };

            ShowNotification(notification);
            quadras = await QuadrasRepository.ListarQuadrasAsync();
        }
    }
    async Task Excluir(int id)
    {
        await QuadrasRepository.DeleteQuadraAsync(id);
    }

    private async Task OpenDialogEdit(int id, Quadra quadra)
    {
        var parameters = new DialogParameters
        {
        {"Id", id },
        {"Quadra", quadra }
        };


        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<EditQuadraDialog>("Editar quadra", parameters, options);
        var result = await dialog.Result;
    }
}
